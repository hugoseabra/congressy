###############################################################################
# CUIDADO!
# Esta script é gerenciado pelo CI. Não altere ou mude sem saber o que está
# fazendo.
###############################################################################
# CI-STEP: Destruir e (re)criar container de versão de staging
#
# - o container usa o banco de dados cgsy-postgres criado externamente, que é o
#   mesmo utilizado para o ambiente de desenvolvimento (local).
# - IMPORTANTE manter o nome do container como "manage-staging" pois outros
#   scripts utilizam esta referência.
# - env-file "env-manage-staging" é construído pelo CI dinamicamente por causa
#   das informações sensíveis.
###############################################################################
version: '3.5'
services:
  # Preparação de volumes.
  migration:
    image: cgsy-staging
    container_name: migration-staging
    hostname: migration-staging
    entrypoint:
      - /deploy/services/migration/container-entry.sh
    env_file:
      - /tmp/staging-files/env-manage-staging
    networks:
      - postgres

  volume:
    image: cgsy-staging
    container_name: volume-staging
    hostname: volume-staging
    depends_on:
      - migration
    entrypoint:
      - /deploy/services/volume/container-entry.sh
    env_file: /tmp/staging-files/env-manage-staging
    volumes:
      - /etc/localtime:/etc/localtime
      - ./media:/code/media
      - ./exporter:/tmp/exporter
      - ./barcodes:/tmp/barcodes
      - ./vouchers:/tmp/vouchers

  celery:
    image: cgsy-staging
    restart: unless-stopped
    hostname: HOSTNAME-celery
    networks:
      - postgres
      - mailhog
      - wkhtmltopdf
      - rabbitmq
    entrypoint:
      - /deploy/services/celery/container-entry.sh
    volumes:
      - /etc/localtime:/etc/localtime
      - ./media:/code/media
      - ./exporter:/tmp/exporter
      - ./qrcodes:/tmp/qrcodes
      - ./barcodes:/tmp/barcodes
      - ./vouchers:/tmp/vouchers
    env_file: /tmp/staging-files/env-manage-staging

  cron:
    image: cgsy-staging
    container_name: cron-staging
    hostname: cron-staging
    depends_on:
      - migration
      - volume
    entrypoint:
      - /deploy/services/cron/container-entry.sh
    networks:
      - postgres
      - mailhog
      - wkhtmltopdf
      - rabbitmq
    env_file: /tmp/staging-files/env-manage-staging
    volumes:
      - /etc/localtime:/etc/localtime
      - ./media:/code/media
      - ./exporter:/tmp/exporter
      - ./barcodes:/tmp/barcodes
      - ./vouchers:/tmp/vouchers

  manage:
    image: cgsy-staging
    container_name: manage-staging
    hostname: manage-staging
    healthcheck:
      test: "/code/bin/env/healthcheck.sh"
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - migration
    entrypoint:
      - /staging/services/web/manage/container-entry.sh
    networks:
      - postgres
      - mailhog
      - wkhtmltopdf
      - rabbitmq
    ports:
      - "8080:8000"
    env_file: /tmp/staging-files/env-manage-staging
    volumes:
      - /etc/localtime:/etc/localtime
      - ./media:/code/media
      - ./exporter:/tmp/exporter
      - ./qrcodes:/tmp/qrcodes
      - ./barcodes:/tmp/barcodes
      - ./vouchers:/tmp/vouchers

networks:
  postgres:
    external:
      name: local_postgres
  mailhog:
    external:
      name: local_mailhog
  wkhtmltopdf:
    external:
      name: local_wkhtmltopdf
  rabbitmq:
    external:
      name: local_rabbitmq
