###############################################################################
# IMPORTANTE:
# Os secrets são cadastrados no servidor de CI (Drone) pelo repositório
# 'cgsy-infra', através do arquivo /drone/create-secrets.py.
###############################################################################

#=============================================================================#
# INFRA
#=============================================================================#
kind: pipeline
type: exec
name: infra-staging

clone:
  depth: 1

trigger:
  branch:
    - hotfix/*
    - bugfix/*
    - release/*

steps:
  - name: create-tmp-dirs
    commands:
      - mkdir -p /tmp/bkp
      - mkdir -p /tmp/staging-files

  - name: save-staging-version
    commands:
      - basename ${DRONE_COMMIT_BRANCH} > /tmp/staging-files/version
      - echo "${DRONE_BUILD_NUMBER}" > /tmp/staging-files/build_number
      - echo "${DRONE_COMMIT_AUTHOR_NAME}" > /tmp/staging-files/build_author
      - echo "${DRONE_COMMIT_AUTHOR_AVATAR}" > /tmp/staging-files/build_author_avatar
      - echo "${DRONE_BUILD_LINK}" > /tmp/staging-files/build_link

  - name: create-awsecr-service
    environment:
      AWS_KEY:
        from_secret: AWS_KEY
      AWS_SECRET:
        from_secret: AWS_SECRET
      AWS_ACCOUNT_ID:
        from_secret: AWS_ACCOUNT_ID
    commands:
      - mkdir -p /tmp/awsecr
      - echo "AWS_KEY=$${AWS_KEY}" > /tmp/awsecr/env-awsecr
      - echo "AWS_SECRET=$${AWS_SECRET}" >> /tmp/awsecr/env-awsecr
      - echo "AWS_ACCOUNT_ID=$${AWS_ACCOUNT_ID}" >> /tmp/awsecr/env-awsecr
      - echo "AWS_REGION=us-east-1" >> /tmp/awsecr/env-awsecr
      - echo "AWS_FORMAT=json" >> /tmp/awsecr/env-awsecr
      - cp ./bin/env/prod/01_create-awsecr-container.sh /tmp/awsecr/.
      - sh /tmp/awsecr/01_create-awsecr-container.sh

  - name: create-staging-env-file
    environment:
      AWS_KEY:
        from_secret: AWS_KEY
      AWS_SECRET:
        from_secret: AWS_SECRET
      DOMAIN:
        from_secret: DOMAIN_STAGING
      FORCE_HTTPS:
        from_secret: FORCE_HTTPS_STAGING
      BUCKET_LOCATION:
        from_secret: BUCKET_LOCATION
      BUCKET_NAME:
        from_secret: BUCKET_NAME
      DBHOST:
        from_secret: DBHOST_STAGING
      DBUSER:
        from_secret: DBUSER_STAGING
      DBPASS:
        from_secret: DBPASS_STAGING
      DBNAME:
        from_secret: DBNAME_STAGING
      DBPORT:
        from_secret: DBPORT_STAGING
      SENTRY_PUBLIC_DSN:
        from_secret: SENTRY_PUBLIC_DSN
      SENTRY_PRIVATE_DSN:
        from_secret: SENTRY_PRIVATE_DSN
    commands:
      - echo "DJANGO_SETTINGS_MODULE=project.manage.settings.staging" > /tmp/staging-files/env-manage-staging
      - echo "AWS_KEY=$${AWS_KEY}" >> /tmp/staging-files/env-manage-staging
      - echo "AWS_SECRET=$${AWS_SECRET}" >> /tmp/staging-files/env-manage-staging
      - echo "DOMAIN=$${DOMAIN}" >> /tmp/staging-files/env-manage-staging
      - echo "FORCE_HTTPS=$${FORCE_HTTPS}" >> /tmp/staging-files/env-manage-staging
      - echo "BUCKET_LOCATION=$${BUCKET_LOCATION}" >> /tmp/staging-files/env-manage-staging
      - echo "BUCKET_NAME=$${BUCKET_NAME}" >> /tmp/staging-files/env-manage-staging
      - echo "DBHOST=$${DBHOST}" >> /tmp/staging-files/env-manage-staging
      - echo "DBUSER=$${DBUSER}" >> /tmp/staging-files/env-manage-staging
      - echo "DBPASS=$${DBPASS}" >> /tmp/staging-files/env-manage-staging
      - echo "DBNAME=$${DBNAME}" >> /tmp/staging-files/env-manage-staging
      - echo "DBPORT=$${DBPORT}" >> /tmp/staging-files/env-manage-staging
      - echo "SENTRY_PUBLIC_DSN=$${SENTRY_PUBLIC_DSN}" >> /tmp/staging-files/env-manage-staging
      - echo "SENTRY_PRIVATE_DSN=$${SENTRY_PRIVATE_DSN}" >> /tmp/staging-files/env-manage-staging
      - echo "RABBITMQ_USER=cgsy" >> /tmp/staging-files/env-manage-staging
      - echo "RABBITMQ_PASS=cgsy" >> /tmp/staging-files/env-manage-staging
      - echo "RABBITMQ_SERVER=rabbitmq" >> /tmp/staging-files/env-manage-staging

#=============================================================================#
# STAGING
#=============================================================================#
---
kind: pipeline
type: docker
name: staging

depends_on:
  # Must run after the first pipeline
  - infra-staging

trigger:
  branch:
    - hotfix/*
    - bugfix/*
    - release/*
  status:
    # Only runs if the first pipeline was fully successful
    - success

# Custom definition for cloning, adding tags and depth
clone:
  depth: 1

# Steps of deploy, according to configurations and conditionals
steps:
#  - name: fetch-tags
#    pull: if-not-exists
#    image: alpine/git
#    commands:
#      - git fetch --tags
  - name: copy-version-files
    image: alpine
    pull: if-not-exists
    volumes:
      - name: staging-env-files
        path: /tmp/staging-files
    commands:
      - cp /tmp/staging-files/version .
      - cp /tmp/staging-files/build_number .
      - cp /tmp/staging-files/build_author .
      - cp /tmp/staging-files/build_author_avatar .
      - cp /tmp/staging-files/build_link .

  - name: backup-db-staging
    image: postgres:9.6-alpine
    pull: if-not-exists
    environment:
      DBHOST:
        from_secret: DBHOST
      DBUSER:
        from_secret: DBUSER
      DBPASS:
        from_secret: DBPASS
      DBNAME:
        from_secret: DBNAME
      DBPORT:
        from_secret: DBPORT
    volumes:
      - name: main_cache
        path: /tmp/bkp
      - name: localtime
        path: /etc/localtime
    commands:
      - ./bin/env/staging/01_backup-db-staging.sh

#  - name: recreate-staging-db
#    image: tmaier/docker-compose
#    pull: if-not-exists
#    volumes:
#      - name: main_cache
#        path: /tmp/bkp
#      - name: localtime
#        path: /etc/localtime
#      - name: docker-sock
#        path: /var/run/docker.sock
#    commands:
#      - ./bin/env/staging/02_recreate-db-staging.sh

  - name: download-hotsite-v2
    image: docker
    pull: if-not-exists
    volumes:
      - name: localtime
        path: /etc/localtime
      - name: docker-sock
        path: /var/run/docker.sock
    commands:
      - ./bin/env/staging/05_download_hotsite.sh

  - name: build-staging-image
    image: docker
    pull: if-not-exists
    volumes:
      - name: localtime
        path: /etc/localtime
      - name: docker-sock
        path: /var/run/docker.sock
      - name: staging-env-files
        path: /tmp/staging-files
    commands:
      - |
        printf "Building version: `cat ./version` - build `cat ./build_number`"
        printf " , por `cat ./build_author`\n\n"
      - |
        docker build --rm \
          -t cgsy-staging \
          -f ./conf/staging/Dockerfile .

  - name: deploy-staging
    image: tmaier/docker-compose
    pull: if-not-exists
    volumes:
      - name: localtime
        path: /etc/localtime
      - name: docker-sock
        path: /var/run/docker.sock
      - name: cgsy-media
        path: /var/www/cgsy/media
      - name: staging-env-files
        path: /tmp/staging-files
    commands:
      - sh ./bin/env/staging/03_start-cgsy-staging.sh
      - docker system prune -a -f --filter 'label=cgsy.image.name=cgsy-platform-staging'

  - name: notify-staging-on-telegram
    image: appleboy/drone-telegram
    pull: if-not-exists
    settings:
      token: 482555800:AAHSWjlo_kufu069-5N_ecp9ZqQ_r1zpep8
      to: -275808686 # ID chat Congressy
#      to: 245012348 # ID hugoseabra
      format: markdown
      message: >
        *{{uppercase build.status }} - Ambiente RC*


        *Repo:* {{ repo.name }} das {{datetime build.started "3:04PM" "UTC"}} às {{datetime build.finished"3:04PM" "UTC"}}

        *Branch:* {{ commit.branch }}

        *Build:* {{build.number}}

        *Duração:* {{duration build.started build.finished}}

        *Autor:* {{ commit.author.name }}

        *Mensagem:*

        ```
        {{ commit.message }}
        ```

        *Ambiente:* https://test.congressy.com/login/


        *Build Link:* {{ build.link }}


        *Commit:* {{ commit.link }}

    when:
      status:
        - success
        - failure

volumes:
  - name: main_cache
    host:
      path: /tmp/bkp
  - name: localtime
    host:
      path: /etc/localtime
  - name: docker-sock
    host:
      path: /var/run/docker.sock
  - name: staging-env-files
    host:
      path: /tmp/staging-files
  - name: cgsy-media
    host:
      path: /media
